import org.apache.tools.ant.taskdefs.condition.Os

ext {
	// The drivers we want to use
	drivers = [
		"firefox",
		"chrome",
		"phantomJs"
	]

	ext {
		groovyVersion = '2.4.7'
		gebVersion = '1.0'
		seleniumVersion = '3.0.1'
		geckoDriverVersion = '0.11.1'
		chromeDriverVersion = '2.25'
		phantomJsVersion = '2.1.1'
	}
}

apply plugin: "groovy"
apply plugin: "eclipse"
apply from: "gradle/idea.gradle"
apply from: "gradle/osSpecificDownloads.gradle"

repositories { mavenCentral() }

dependencies {
	// If using Spock, need to depend on geb-spock
	testCompile "org.gebish:geb-spock:$gebVersion"
	testCompile("org.spockframework:spock-core:1.1-groovy-2.4-rc-3") { exclude group: "org.codehaus.groovy" }
	testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"

	// If using JUnit, need to depend on geb-junit (3 or 4)
	testCompile "org.gebish:geb-junit4:$gebVersion"

	// Drivers
	testCompile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
	testCompile("com.codeborne:phantomjsdriver:1.3.0") { // phantomjs driver pulls in a different selenium version
		transitive = false }
}

task wrapper(type: Wrapper) { gradleVersion = '3.2' }

drivers.each { driver ->
	task "${driver}Test"(type: Test) {
		reports {
			html.destination = reporting.file("$name/tests")
			junitXml.destination = file("$buildDir/test-results/$name")
		}

		outputs.upToDateWhen { false }  // Always run tests

		systemProperty "geb.build.reportsDir", reporting.file("$name/geb")
		systemProperty "geb.env", driver


		// すべてをテスト対象にする場合やテスト対象を指定しない場合は、
		// テストケースが2回実行されてしまうためSuiteClassesを除外します。
		if(project.hasProperty('target')){
			if( project.getAt('target') !="*" ){
				include '**/'+ project.getAt('target') + '.class'
			} else {
				exclude '**/*Suite.class'
			}
		} else {
			exclude '**/*Suite.class'
		}



		// If you wanted to set the baseUrl in your build…
		// systemProperty "geb.build.baseUrl", "http://myapp.com"
		//systemProperty "geb.build.baseUrl", System.properties['geb.build.baseUrl']
	}
}

firefoxTest {
	dependsOn unzipGeckoDriver

	def geckodriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "geckodriver.exe" : "geckodriver"
	systemProperty "webdriver.gecko.driver", new File(unzipGeckoDriver.outputs.files.singleFile, geckodriverFilename).absolutePath
}

chromeTest {
	dependsOn unzipChromeDriver

	def chromedriverFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
	systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}

phantomJsTest {
	dependsOn unzipPhantomJs

	def phantomJsFilename = Os.isFamily(Os.FAMILY_WINDOWS) ? "bin/phantomjs.exe" : "bin/phantomjs"
	systemProperty "phantomjs.binary.path", new File(unzipPhantomJs.outputs.files.singleFile, phantomJsFilename).absolutePath
}

test {
	dependsOn drivers.collect { tasks["${it}Test"] }
	enabled = false
}

apply from: "gradle/ci.gradle"


// テストをクラス単位で並列実行させるプロセス上限数
//test.maxParallelForks = 5
